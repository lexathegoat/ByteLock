import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, filedialog
import threading
import time
import os
import hashlib
import winreg
import win32file
import win32con
import win32api
import json
import shutil
from datetime import datetime
from pathlib import Path
import psutil
import re

class ByteLock:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("ByteLock V1")
        self.root.geometry("1200x700")
        self.root.configure(bg="#0d1117")
        
        # Ayarlar
        self.config_file = "bytelock_config.json"
        self.quarantine_folder = "USB_Quarantine"
        self.whitelist_file = "usb_whitelist.json"
        self.blacklist_file = "usb_blacklist.json"
        self.load_config()
        
        # USB monitoring durumu
        self.monitoring = False
        self.connected_usbs = {}
        self.scan_history = []
        self.total_threats_blocked = 0
        
        # Tehlikeli dosya uzantƒ±larƒ± (geni≈ületilmi≈ü)
        self.dangerous_extensions = [
            '.exe', '.bat', '.cmd', '.com', '.pif', '.scr', '.vbs', 
            '.js', '.jar', '.msi', '.reg', '.ps1', '.hta', '.cpl',
            '.dll', '.sys', '.drv', '.ocx', '.ax', '.gadget', '.inf',
            '.lnk', '.wsf', '.vbe', '.jse', '.app', '.deb', '.rpm'
        ]
        
        # ≈û√ºpheli dosya isimleri
        self.suspicious_names = [
            'autorun', 'autoplay', 'setup', 'install', 'update',
            'crack', 'keygen', 'patch', 'hack', 'trojan', 'virus',
            'ransomware', 'backdoor', 'malware', 'spyware'
        ]
        
        # Tehlikeli dosya imzalarƒ± (magic bytes) - geni≈ületilmi≈ü
        self.dangerous_signatures = {
            b'MZ': 'Windows Executable',
            b'PK\x03\x04': 'ZIP/JAR Archive',
            b'\x50\x45\x00\x00': 'PE Executable',
            b'\x7fELF': 'Linux Executable',
            b'\xca\xfe\xba\xbe': 'Mach-O Executable',
            b'\x4d\x5a\x90': 'DOS Executable',
            b'#!': 'Script File'
        }
        
        # Bilinen k√∂t√º hash'ler (√∂rnek - ger√ßek projede b√ºy√ºk veritabanƒ± olur)
        self.malware_hashes = set()
        
        # Whitelist ve Blacklist
        self.usb_whitelist = set()
        self.usb_blacklist = set()
        self.load_lists()
        
        # ƒ∞statistikler
        self.stats = {
            'total_scans': 0,
            'threats_found': 0,
            'threats_cleaned': 0,
            'usb_connected': 0,
            'usb_blocked': 0
        }
        
        self.create_quarantine_folder()
        self.create_gui()
        self.update_status()
        self.update_stats_display()
        
    def create_quarantine_folder(self):
        """Karantina klas√∂r√º olu≈ütur"""
        if not os.path.exists(self.quarantine_folder):
            os.makedirs(self.quarantine_folder)
    
    def load_lists(self):
        """Whitelist ve blacklist y√ºkle"""
        try:
            if os.path.exists(self.whitelist_file):
                with open(self.whitelist_file, 'r') as f:
                    self.usb_whitelist = set(json.load(f))
            if os.path.exists(self.blacklist_file):
                with open(self.blacklist_file, 'r') as f:
                    self.usb_blacklist = set(json.load(f))
        except:
            pass
    
    def save_lists(self):
        """Whitelist ve blacklist kaydet"""
        with open(self.whitelist_file, 'w') as f:
            json.dump(list(self.usb_whitelist), f)
        with open(self.blacklist_file, 'w') as f:
            json.dump(list(self.usb_blacklist), f)
    
    def load_config(self):
        """Ayarlarƒ± y√ºkle"""
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r') as f:
                    config = json.load(f)
                    self.auto_start = config.get('auto_start', False)
                    self.auto_scan = config.get('auto_scan', True)
                    self.auto_clean = config.get('auto_clean', False)
                    self.deep_scan = config.get('deep_scan', True)
                    self.quarantine_mode = config.get('quarantine_mode', True)
                    self.hash_check = config.get('hash_check', True)
                    self.size_limit = config.get('size_limit', 100)  # MB
                    self.notifications = config.get('notifications', True)
                    self.block_autorun = config.get('block_autorun', True)
            else:
                self.set_default_config()
        except:
            self.set_default_config()
    
    def set_default_config(self):
        """Varsayƒ±lan ayarlar"""
        self.auto_start = False
        self.auto_scan = True
        self.auto_clean = False
        self.deep_scan = True
        self.quarantine_mode = True
        self.hash_check = True
        self.size_limit = 100
        self.notifications = True
        self.block_autorun = True
    
    def save_config(self):
        """Ayarlarƒ± kaydet"""
        config = {
            'auto_start': self.auto_start,
            'auto_scan': self.auto_scan,
            'auto_clean': self.auto_clean,
            'deep_scan': self.deep_scan,
            'quarantine_mode': self.quarantine_mode,
            'hash_check': self.hash_check,
            'size_limit': self.size_limit,
            'notifications': self.notifications,
            'block_autorun': self.block_autorun
        }
        with open(self.config_file, 'w') as f:
            json.dump(config, f, indent=4)
    
    def create_gui(self):
        """Ana GUI olu≈ütur - Ultra detaylƒ±"""
        # Stil ayarlarƒ±
        style = ttk.Style()
        style.theme_use('clam')
        
        # Header
        header = tk.Frame(self.root, bg="#1f6feb", height=90)
        header.pack(fill=tk.X)
        header.pack_propagate(False)
        
        title_frame = tk.Frame(header, bg="#1f6feb")
        title_frame.pack(expand=True)
        
        title = tk.Label(title_frame, text="üõ°Ô∏è USB Security Guard Pro", 
                        font=("Segoe UI", 28, "bold"), bg="#1f6feb", fg="white")
        title.pack()
        
        subtitle = tk.Label(title_frame, text="Advanced USB Protection System | Real-time Monitoring & Threat Detection", 
                          font=("Segoe UI", 10), bg="#1f6feb", fg="#c9d1d9")
        subtitle.pack()
        
        # Ana container
        main_container = tk.Frame(self.root, bg="#0d1117")
        main_container.pack(fill=tk.BOTH, expand=True)
        
        # Sol panel - Kontroller ve Ayarlar
        left_panel = tk.Frame(main_container, bg="#161b22", width=350)
        left_panel.pack(side=tk.LEFT, fill=tk.BOTH, padx=10, pady=10)
        left_panel.pack_propagate(False)
        
        # ƒ∞statistikler Kartƒ±
        stats_card = tk.LabelFrame(left_panel, text="üìä ƒ∞statistikler", 
                                   bg="#0d1117", fg="#58a6ff", 
                                   font=("Segoe UI", 12, "bold"), bd=2)
        stats_card.pack(pady=(0, 10), padx=10, fill=tk.X)
        
        stats_inner = tk.Frame(stats_card, bg="#0d1117")
        stats_inner.pack(padx=10, pady=10, fill=tk.X)
        
        self.stat_labels = {}
        stats_info = [
            ("Toplam Tarama:", "total_scans", "üîç"),
            ("Tehdit Bulundu:", "threats_found", "‚ö†Ô∏è"),
            ("Tehdit Temizlendi:", "threats_cleaned", "‚úÖ"),
            ("USB Baƒülandƒ±:", "usb_connected", "üîå"),
            ("USB Engellendi:", "usb_blocked", "üö´")
        ]
        
        for label, key, icon in stats_info:
            frame = tk.Frame(stats_inner, bg="#0d1117")
            frame.pack(fill=tk.X, pady=2)
            tk.Label(frame, text=f"{icon} {label}", bg="#0d1117", fg="#8b949e",
                    font=("Segoe UI", 9), anchor=tk.W).pack(side=tk.LEFT)
            self.stat_labels[key] = tk.Label(frame, text="0", bg="#0d1117", fg="#58a6ff",
                                            font=("Segoe UI", 9, "bold"), anchor=tk.E)
            self.stat_labels[key].pack(side=tk.RIGHT)
        
        # Kontrol Butonlarƒ±
        control_frame = tk.LabelFrame(left_panel, text="‚öôÔ∏è Kontrol Paneli", 
                                     bg="#0d1117", fg="#58a6ff", 
                                     font=("Segoe UI", 12, "bold"), bd=2)
        control_frame.pack(pady=(0, 10), padx=10, fill=tk.X)
        
        btn_container = tk.Frame(control_frame, bg="#0d1117")
        btn_container.pack(padx=10, pady=10, fill=tk.X)
        
        self.start_btn = tk.Button(btn_container, text="‚ñ∂Ô∏è ƒ∞zlemeyi Ba≈ülat", 
                                   command=self.start_monitoring,
                                   bg="#238636", fg="white", font=("Segoe UI", 10, "bold"),
                                   relief=tk.FLAT, padx=15, pady=8, cursor="hand2",
                                   activebackground="#2ea043")
        self.start_btn.pack(pady=3, fill=tk.X)
        
        self.stop_btn = tk.Button(btn_container, text="‚è∏Ô∏è ƒ∞zlemeyi Durdur", 
                                  command=self.stop_monitoring,
                                  bg="#da3633", fg="white", font=("Segoe UI", 10, "bold"),
                                  relief=tk.FLAT, padx=15, pady=8, cursor="hand2", state=tk.DISABLED,
                                  activebackground="#f85149")
        self.stop_btn.pack(pady=3, fill=tk.X)
        
        scan_btn = tk.Button(btn_container, text="üîç Manuel Tarama", 
                           command=self.manual_scan,
                           bg="#1f6feb", fg="white", font=("Segoe UI", 10, "bold"),
                           relief=tk.FLAT, padx=15, pady=8, cursor="hand2",
                           activebackground="#388bfd")
        scan_btn.pack(pady=3, fill=tk.X)
        
        quarantine_btn = tk.Button(btn_container, text="üì¶ Karantinayƒ± G√∂ster", 
                                  command=self.show_quarantine,
                                  bg="#6e7681", fg="white", font=("Segoe UI", 10, "bold"),
                                  relief=tk.FLAT, padx=15, pady=8, cursor="hand2",
                                  activebackground="#8b949e")
        quarantine_btn.pack(pady=3, fill=tk.X)
        
        whitelist_btn = tk.Button(btn_container, text="üìù Whitelist Y√∂net", 
                                 command=self.manage_whitelist,
                                 bg="#8957e5", fg="white", font=("Segoe UI", 10, "bold"),
                                 relief=tk.FLAT, padx=15, pady=8, cursor="hand2",
                                 activebackground="#a371f7")
        whitelist_btn.pack(pady=3, fill=tk.X)
        
        # Ayarlar
        settings_frame = tk.LabelFrame(left_panel, text="‚öôÔ∏è Geli≈ümi≈ü Ayarlar", 
                                      bg="#0d1117", fg="#58a6ff", 
                                      font=("Segoe UI", 12, "bold"), bd=2)
        settings_frame.pack(pady=(0, 10), padx=10, fill=tk.BOTH, expand=True)
        
        settings_scroll = tk.Frame(settings_frame, bg="#0d1117")
        settings_scroll.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)
        
        # T√ºm ayar se√ßenekleri
        self.setting_vars = {}
        settings_list = [
            ("auto_start", "üöÄ Bilgisayarla Ba≈ülat", self.toggle_auto_start),
            ("auto_scan", "üîç Otomatik Tarama", self.save_config),
            ("auto_clean", "üóëÔ∏è Otomatik Temizlik", self.save_config),
            ("deep_scan", "üî¨ Derin Tarama", self.save_config),
            ("quarantine_mode", "üì¶ Karantina Modu", self.save_config),
            ("hash_check", "üîê Hash Kontrol√º", self.save_config),
            ("notifications", "üîî Bildirimler", self.save_config),
            ("block_autorun", "üö´ Autorun Engelle", self.save_config)
        ]
        
        for key, text, cmd in settings_list:
            var = tk.BooleanVar(value=getattr(self, key))
            self.setting_vars[key] = var
            check = tk.Checkbutton(settings_scroll, text=text,
                                  variable=var, command=cmd,
                                  bg="#0d1117", fg="#c9d1d9", selectcolor="#21262d",
                                  font=("Segoe UI", 9), activebackground="#0d1117",
                                  activeforeground="#58a6ff")
            check.pack(anchor=tk.W, pady=3)
        
        # Durum g√∂stergesi
        status_frame = tk.Frame(left_panel, bg="#161b22", relief=tk.RAISED, bd=1)
        status_frame.pack(pady=(0, 0), padx=10, fill=tk.X)
        
        tk.Label(status_frame, text="Sistem Durumu:", bg="#161b22", fg="#8b949e",
                font=("Segoe UI", 9, "bold")).pack(anchor=tk.W, padx=10, pady=(10, 5))
        
        self.status_label = tk.Label(status_frame, text="‚ö´ Beklemede", 
                                     bg="#161b22", fg="#f0883e",
                                     font=("Segoe UI", 11, "bold"))
        self.status_label.pack(anchor=tk.W, padx=10, pady=(0, 10))
        
        # Orta panel - Baƒülƒ± USB'ler
        middle_panel = tk.Frame(main_container, bg="#161b22", width=300)
        middle_panel.pack(side=tk.LEFT, fill=tk.BOTH, padx=(0, 10), pady=10)
        middle_panel.pack_propagate(False)
        
        usb_label = tk.Label(middle_panel, text="üîå Baƒülƒ± USB Cihazlar", 
                           font=("Segoe UI", 14, "bold"), bg="#161b22", fg="#58a6ff")
        usb_label.pack(pady=15)
        
        # USB listesi
        usb_list_frame = tk.Frame(middle_panel, bg="#0d1117")
        usb_list_frame.pack(padx=10, pady=(0, 10), fill=tk.BOTH, expand=True)
        
        self.usb_listbox = tk.Listbox(usb_list_frame, bg="#0d1117", fg="#c9d1d9",
                                      font=("Consolas", 10), relief=tk.FLAT, bd=0,
                                      selectbackground="#1f6feb", selectforeground="white")
        usb_scrollbar = tk.Scrollbar(usb_list_frame, command=self.usb_listbox.yview)
        self.usb_listbox.config(yscrollcommand=usb_scrollbar.set)
        
        usb_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.usb_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # USB butonlarƒ±
        usb_btn_frame = tk.Frame(middle_panel, bg="#161b22")
        usb_btn_frame.pack(padx=10, pady=(0, 10), fill=tk.X)
        
        tk.Button(usb_btn_frame, text="‚úÖ Whitelist'e Ekle",
                 command=self.add_to_whitelist, bg="#238636", fg="white",
                 font=("Segoe UI", 9, "bold"), relief=tk.FLAT, pady=5,
                 cursor="hand2").pack(fill=tk.X, pady=2)
        
        tk.Button(usb_btn_frame, text="üö´ Blacklist'e Ekle",
                 command=self.add_to_blacklist, bg="#da3633", fg="white",
                 font=("Segoe UI", 9, "bold"), relief=tk.FLAT, pady=5,
                 cursor="hand2").pack(fill=tk.X, pady=2)
        
        tk.Button(usb_btn_frame, text="üìä USB Detaylarƒ±",
                 command=self.show_usb_details, bg="#1f6feb", fg="white",
                 font=("Segoe UI", 9, "bold"), relief=tk.FLAT, pady=5,
                 cursor="hand2").pack(fill=tk.X, pady=2)
        
        tk.Button(usb_btn_frame, text="‚èèÔ∏è G√ºvenli √áƒ±kar",
                 command=self.safe_eject, bg="#6e7681", fg="white",
                 font=("Segoe UI", 9, "bold"), relief=tk.FLAT, pady=5,
                 cursor="hand2").pack(fill=tk.X, pady=2)
        
        # Saƒü panel - Log ve Tehditler
        right_panel = tk.Frame(main_container, bg="#161b22")
        right_panel.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, pady=10, padx=(0, 10))
        
        # Notebook (tab sistemi)
        notebook = ttk.Notebook(right_panel)
        notebook.pack(fill=tk.BOTH, expand=True)
        
        # Log sekmesi
        log_tab = tk.Frame(notebook, bg="#0d1117")
        notebook.add(log_tab, text="üìã Aktivite G√ºnl√ºƒü√º")
        
        log_toolbar = tk.Frame(log_tab, bg="#0d1117")
        log_toolbar.pack(fill=tk.X, padx=10, pady=10)
        
        tk.Button(log_toolbar, text="üóëÔ∏è Temizle", command=self.clear_log,
                 bg="#6e7681", fg="white", font=("Segoe UI", 9, "bold"),
                 relief=tk.FLAT, padx=10, pady=5, cursor="hand2").pack(side=tk.LEFT, padx=5)
        
        tk.Button(log_toolbar, text="üíæ Kaydet", command=self.save_log,
                 bg="#1f6feb", fg="white", font=("Segoe UI", 9, "bold"),
                 relief=tk.FLAT, padx=10, pady=5, cursor="hand2").pack(side=tk.LEFT)
        
        self.log_text = scrolledtext.ScrolledText(log_tab, 
                                                  bg="#0d1117", fg="#c9d1d9",
                                                  font=("Consolas", 9),
                                                  relief=tk.FLAT, bd=0,
                                                  wrap=tk.WORD, insertbackground="#58a6ff")
        self.log_text.pack(padx=10, pady=(0, 10), fill=tk.BOTH, expand=True)
        
        # Log renk etiketleri
        self.log_text.tag_config("success", foreground="#3fb950")
        self.log_text.tag_config("warning", foreground="#d29922")
        self.log_text.tag_config("error", foreground="#f85149")
        self.log_text.tag_config("info", foreground="#58a6ff")
        
        # Tehditler sekmesi
        threats_tab = tk.Frame(notebook, bg="#0d1117")
        notebook.add(threats_tab, text="‚ö†Ô∏è Tespit Edilen Tehditler")
        
        self.threats_text = scrolledtext.ScrolledText(threats_tab, 
                                                     bg="#0d1117", fg="#c9d1d9",
                                                     font=("Consolas", 9),
                                                     relief=tk.FLAT, bd=0,
                                                     wrap=tk.WORD)
        self.threats_text.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)
        
        # Tarama Ge√ßmi≈üi sekmesi
        history_tab = tk.Frame(notebook, bg="#0d1117")
        notebook.add(history_tab, text="üìú Tarama Ge√ßmi≈üi")
        
        self.history_text = scrolledtext.ScrolledText(history_tab, 
                                                     bg="#0d1117", fg="#c9d1d9",
                                                     font=("Consolas", 9),
                                                     relief=tk.FLAT, bd=0,
                                                     wrap=tk.WORD)
        self.history_text.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)
        
        # ƒ∞lk log mesajlarƒ±
        self.log("‚ú® USB Security Guard Pro ba≈ülatƒ±ldƒ±", "success")
        self.log(f"üìÖ {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}", "info")
        self.log("üõ°Ô∏è Sistem hazƒ±r - USB cihazlarƒ±nƒ±z korunuyor", "info")
    
    def log(self, message, tag="info"):
        """Geli≈ümi≈ü log sistemi"""
        timestamp = datetime.now().strftime('%H:%M:%S')
        log_message = f"[{timestamp}] {message}\n"
        self.log_text.insert(tk.END, log_message, tag)
        self.log_text.see(tk.END)
        self.root.update()
    
    def log_threat(self, threat_info):
        """Tehdit logla"""
        timestamp = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
        threat_message = f"\n{'='*60}\n"
        threat_message += f"‚ö†Ô∏è TEHDƒ∞T TESPƒ∞T EDƒ∞LDƒ∞ - {timestamp}\n"
        threat_message += f"{'='*60}\n"
        threat_message += f"Dosya: {threat_info['path']}\n"
        threat_message += f"Tehdit T√ºr√º: {threat_info['type']}\n"
        threat_message += f"A√ßƒ±klama: {threat_info['description']}\n"
        if 'hash' in threat_info:
            threat_message += f"Hash: {threat_info['hash']}\n"
        threat_message += f"Aksiyon: {threat_info['action']}\n"
        
        self.threats_text.insert(tk.END, threat_message)
        self.threats_text.see(tk.END)
    
    def clear_log(self):
        """G√ºnl√ºƒü√º temizle"""
        self.log_text.delete(1.0, tk.END)
        self.log("üóëÔ∏è G√ºnl√ºk temizlendi", "info")
    
    def save_log(self):
        """G√ºnl√ºƒü√º kaydet"""
        filename = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")],
            initialfile=f"usb_security_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        )
        if filename:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(self.log_text.get(1.0, tk.END))
            self.log(f"üíæ G√ºnl√ºk kaydedildi: {filename}", "success")
    
    def update_stats_display(self):
        """ƒ∞statistikleri g√ºncelle"""
        for key, label in self.stat_labels.items():
            label.config(text=str(self.stats[key]))
        self.root.after(1000, self.update_stats_display)
    
    def toggle_auto_start(self):
        """Otomatik ba≈ülatmayƒ± a√ß/kapat"""
        self.auto_start = self.setting_vars['auto_start'].get()
        self.save_config()
        
        try:
            key_path = r"Software\Microsoft\Windows\CurrentVersion\Run"
            key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_SET_VALUE)
            
            if self.auto_start:
                exe_path = os.path.abspath(__file__)
                winreg.SetValueEx(key, "ByteLock", 0, winreg.REG_SZ, f'pythonw "{exe_path}"')
                self.log("‚úÖ Otomatik ba≈ülatma A√áILDI", "success")
                if self.setting_vars['notifications'].get():
                    messagebox.showinfo("Ba≈üarƒ±lƒ±", "Program artƒ±k Windows ile birlikte ba≈ülayacak!")
            else:
                try:
                    winreg.DeleteValue(key, "ByteLock")
                    self.log("‚ùå Otomatik ba≈ülatma KAPATILDI", "warning")
                except FileNotFoundError:
                    pass
            
            winreg.CloseKey(key)
        except Exception as e:
            self.log(f"‚ö†Ô∏è Otomatik ba≈ülatma hatasƒ±: {str(e)}", "error")
    
    def get_drives(self):
        """T√ºm USB s√ºr√ºc√ºleri al - geli≈ümi≈ü"""
        drives = {}
        bitmask = win32api.GetLogicalDrives()
        for letter in range(65, 91):  # A-Z
            if bitmask & (1 << (letter - 65)):
                drive = chr(letter) + ":"
                try:
                    drive_type = win32file.GetDriveType(drive)
                    if drive_type == win32con.DRIVE_REMOVABLE:
                        # S√ºr√ºc√º bilgilerini al
                        try:
                            volume_info = win32api.GetVolumeInformation(drive)
                            serial = win32api.GetVolumeInformation(drive)[1]
                            
                            # Disk kullanƒ±m bilgisi
                            usage = psutil.disk_usage(drive)
                            
                            drives[drive] = {
                                'name': volume_info[0] if volume_info[0] else "Unnamed",
                                'serial': serial,
                                'filesystem': volume_info[4],
                                'total_space': usage.total,
                                'used_space': usage.used,
                                'free_space': usage.free,
                                'percent': usage.percent
                            }
                        except:
                            drives[drive] = {'name': 'Unknown', 'serial': 'N/A'}
                except:
                    pass
        return drives
    
    def calculate_file_hash(self, filepath):
        """Dosya hash'i hesapla"""
        try:
            hasher = hashlib.sha256()
            with open(filepath, 'rb') as f:
                while chunk := f.read(8192):
                    hasher.update(chunk)
            return hasher.hexdigest()
        except:
            return None
    
    def is_suspicious_name(self, filename):
        """Dosya adƒ± ≈ü√ºpheli mi kontrol et"""
        filename_lower = filename.lower()
        for suspicious in self.suspicious_names:
            if suspicious in filename_lower:
                return True
        return False
    
    def start_monitoring(self):
        """USB izlemeyi ba≈ülat"""
        self.monitoring = True
        self.start_btn.config(state=tk.DISABLED)
        self.stop_btn.config(state=tk.NORMAL)
        self.status_label.config(text="üü¢ ƒ∞zleme Aktif", fg="#3fb950")
        self.log("üöÄ USB izleme ba≈ülatƒ±ldƒ± - Sistem aktif", "success")
        
        monitor_thread = threading.Thread(target=self.monitor_usb, daemon=True)
        monitor_thread.start()
    
    def stop_monitoring(self):
        """USB izlemeyi durdur"""
        self.monitoring = False
        self.start_btn.config(state=tk.NORMAL)
        self.stop_btn.config(state=tk.DISABLED)
        self.status_label.config(text="‚ö´ Beklemede", fg="#f0883e")
        self.log("‚è∏Ô∏è USB izleme durduruldu", "warning")
    
    def monitor_usb(self):
        """USB s√ºr√ºc√ºleri s√ºrekli izle - geli≈ümi≈ü"""
        while self.monitoring:
            current_drives = self.get_drives()
            
            # Yeni USB tespit edildi
            new_drives = set(current_drives.keys()) - set(self.connected_usbs.keys())
            for drive in new_drives:
                info = current_drives[drive]
                serial = info['serial']
                
                # Blacklist kontrol√º
                if serial in self.usb_blacklist:
                    self.log(f"üö´ ENGELLENEN USB: {drive} - {info['name']} (Blacklist)", "error")
                    self.stats['usb_blocked'] += 1
                    if self.setting_vars['notifications'].get():
                        messagebox.showwarning("USB Engellendi!", 
                                             f"Bu USB cihaz blacklist'te!\n{drive} - {info['name']}")
                    continue
                
                # Whitelist kontrol√º
                if serial in self.usb_whitelist:
                    self.log(f"‚úÖ G√ºvenli USB baƒülandƒ±: {drive} - {info['name']} (Whitelist)", "success")
                else:
                    self.log(f"üîå Yeni USB tespit edildi: {drive} - {info['name']}", "info")
                    self.log(f"   Serial: {serial}", "info")
                    self.log(f"   Dosya Sistemi: {info['filesystem']}", "info")
                    self.log(f"   Kapasite: {self.format_bytes(info['total_space'])}", "info")
                    self.log(f"   Kullanƒ±lan: {self.format_bytes(info['used_space'])} ({info['percent']}%)", "info")
                
                self.stats['usb_connected'] += 1
                self.connected_usbs[drive] = info
                self.update_usb_list()
                
                # Otomatik tarama
                if self.setting_vars['auto_scan'].get() and serial not in self.usb_whitelist:
                    self.scan_drive(drive)
            
            # USB √ßƒ±karƒ±ldƒ±
            removed_drives = set(self.connected_usbs.keys()) - set(current_drives.keys())
            for drive in removed_drives:
                info = self.connected_usbs[drive]
                self.log(f"üîå USB √ßƒ±karƒ±ldƒ±: {drive} - {info['name']}", "warning")
                del self.connected_usbs[drive]
                self.update_usb_list()
            
            time.sleep(2)
    
    def format_bytes(self, bytes_size):
        """Byte'larƒ± okunabilir formata √ßevir"""
        for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
            if bytes_size < 1024.0:
                return f"{bytes_size:.2f} {unit}"
            bytes_size /= 1024.0
    
    def update_usb_list(self):
        """USB listesini g√ºncelle"""
        self.usb_listbox.delete(0, tk.END)
        for drive, info in self.connected_usbs.items():
            display_text = f"{drive} - {info['name']} ({self.format_bytes(info['total_space'])})"
            self.usb_listbox.insert(tk.END, display_text)
    
    def scan_drive(self, drive):
        """USB s√ºr√ºc√ºy√º geli≈ümi≈ü tara"""
        self.log(f"üîç {drive} taranƒ±yor - Derin analiz ba≈üladƒ±...", "info")
        self.stats['total_scans'] += 1
        
        scan_start = time.time()
        threats_found = []
        files_scanned = 0
        
        try:
            # Autorun.inf kontrol√º
            if self.setting_vars['block_autorun'].get():
                autorun_path = os.path.join(f"{drive}\\", "autorun.inf")
                if os.path.exists(autorun_path):
                    threats_found.append({
                        'path': autorun_path,
                        'type': 'Autorun File',
                        'description': 'Otomatik √ßalƒ±≈üma dosyasƒ± tespit edildi',
                        'action': 'Pending'
                    })
            
            # T√ºm dosyalarƒ± tara
            for root, dirs, files in os.walk(f"{drive}\\"):
                for file in files:
                    files_scanned += 1
                    file_path = os.path.join(root, file)
                    
                    # Dosya boyutu kontrol√º
                    try:
                        file_size = os.path.getsize(file_path)
                        if file_size > self.setting_vars.get('size_limit', 100) * 1024 * 1024:
                            self.log(f"‚ö†Ô∏è B√ºy√ºk dosya atlandƒ±: {file} ({self.format_bytes(file_size)})", "warning")
                            continue
                    except:
                        continue
                    
                    # Uzantƒ± kontrol√º
                    file_ext = os.path.splitext(file)[1].lower()
                    if file_ext in self.dangerous_extensions:
                        threat_info = {
                            'path': file_path,
                            'type': 'Dangerous Extension',
                            'description': f'Tehlikeli dosya uzantƒ±sƒ±: {file_ext}',
                            'action': 'Pending'
                        }
                        threats_found.append(threat_info)
                        continue
                    
                    # ≈û√ºpheli isim kontrol√º
                    if self.is_suspicious_name(file):
                        threat_info = {
                            'path': file_path,
                            'type': 'Suspicious Name',
                            'description': f'≈û√ºpheli dosya adƒ± tespit edildi',
                            'action': 'Pending'
                        }
                        threats_found.append(threat_info)
                    
                    # Derin tarama - dosya imzasƒ± kontrol√º
                    if self.setting_vars['deep_scan'].get():
                        try:
                            with open(file_path, 'rb') as f:
                                header = f.read(8)
                                for signature, desc in self.dangerous_signatures.items():
                                    if header.startswith(signature):
                                        # Executable ama uzantƒ± yanlƒ±≈ü
                                        if file_ext not in self.dangerous_extensions:
                                            threat_info = {
                                                'path': file_path,
                                                'type': 'Hidden Executable',
                                                'description': f'Gizlenmi≈ü √ßalƒ±≈ütƒ±rƒ±labilir dosya: {desc}',
                                                'action': 'Pending'
                                            }
                                            threats_found.append(threat_info)
                                        break
                        except:
                            pass
                    
                    # Hash kontrol√º
                    if self.setting_vars['hash_check'].get() and file_ext in self.dangerous_extensions:
                        file_hash = self.calculate_file_hash(file_path)
                        if file_hash and file_hash in self.malware_hashes:
                            threat_info = {
                                'path': file_path,
                                'type': 'Known Malware',
                                'description': 'Bilinen k√∂t√º ama√ßlƒ± yazƒ±lƒ±m hash\'i',
                                'hash': file_hash,
                                'action': 'Pending'
                            }
                            threats_found.append(threat_info)
        except Exception as e:
            self.log(f"‚ö†Ô∏è Tarama hatasƒ±: {str(e)}", "error")
        
        scan_time = time.time() - scan_start
        
        # Tarama ge√ßmi≈üine ekle
        history_entry = {
            'drive': drive,
            'time': datetime.now().strftime('%d/%m/%Y %H:%M:%S'),
            'files_scanned': files_scanned,
            'threats': len(threats_found),
            'duration': scan_time
        }
        self.scan_history.append(history_entry)
        self.update_history()
        
        # Sonu√ßlarƒ± raporla
        if threats_found:
            self.log(f"‚ö†Ô∏è {len(threats_found)} tehdit tespit edildi! ({files_scanned} dosya tarandƒ±)", "error")
            self.stats['threats_found'] += len(threats_found)
            
            for threat in threats_found:
                self.log(f"  ‚ùå {os.path.basename(threat['path'])}", "error")
                self.log(f"     ‚îî‚îÄ {threat['description']}", "error")
                self.log_threat(threat)
            
            if self.setting_vars['auto_clean'].get():
                self.clean_threats(threats_found)
            else:
                if self.setting_vars['notifications'].get():
                    response = messagebox.askyesno("Tehdit Tespit Edildi!", 
                                                  f"‚ö†Ô∏è {len(threats_found)} tehlikeli dosya bulundu!\n\n"
                                                  f"Tarama s√ºresi: {scan_time:.2f} saniye\n"
                                                  f"Taranan dosya: {files_scanned}\n\n"
                                                  f"Tehditleri temizlemek ister misiniz?")
                    if response:
                        self.clean_threats(threats_found)
        else:
            self.log(f"‚úÖ {drive} g√ºvenli - Tehdit bulunamadƒ± ({files_scanned} dosya tarandƒ±)", "success")
            self.log(f"   Tarama s√ºresi: {scan_time:.2f} saniye", "info")
            if self.setting_vars['notifications'].get():
                messagebox.showinfo("Tarama Tamamlandƒ±", 
                                  f"‚úÖ {drive} s√ºr√ºc√ºs√º g√ºvenli!\n\n"
                                  f"Taranan dosya: {files_scanned}\n"
                                  f"Tarama s√ºresi: {scan_time:.2f} saniye")
    
    def clean_threats(self, threats):
        """Tehditleri temizle - geli≈ümi≈ü"""
        cleaned = 0
        quarantined = 0
        
        for threat in threats:
            file_path = threat['path']
            try:
                if self.setting_vars['quarantine_mode'].get():
                    # Karantinaya al
                    filename = os.path.basename(file_path)
                    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                    quarantine_path = os.path.join(self.quarantine_folder, f"{timestamp}_{filename}")
                    
                    shutil.move(file_path, quarantine_path)
                    threat['action'] = f'Karantinaya alƒ±ndƒ±: {quarantine_path}'
                    self.log(f"üì¶ Karantinaya alƒ±ndƒ±: {filename}", "warning")
                    quarantined += 1
                else:
                    # Direkt sil
                    os.remove(file_path)
                    threat['action'] = 'Silindi'
                    self.log(f"üóëÔ∏è Silindi: {os.path.basename(file_path)}", "success")
                    cleaned += 1
                
                self.stats['threats_cleaned'] += 1
            except Exception as e:
                threat['action'] = f'Hata: {str(e)}'
                self.log(f"‚ö†Ô∏è Temizlenemedi: {os.path.basename(file_path)} - {str(e)}", "error")
        
        total_handled = cleaned + quarantined
        self.log(f"‚úÖ Temizlik tamamlandƒ±: {total_handled}/{len(threats)} tehdit i≈ülendi", "success")
        
        if quarantined > 0:
            self.log(f"üì¶ {quarantined} dosya karantinaya alƒ±ndƒ±", "warning")
        if cleaned > 0:
            self.log(f"üóëÔ∏è {cleaned} dosya silindi", "success")
        
        if self.setting_vars['notifications'].get():
            messagebox.showinfo("Temizlik Tamamlandƒ±", 
                              f"‚úÖ ƒ∞≈ülem tamamlandƒ±!\n\n"
                              f"Karantina: {quarantined}\n"
                              f"Silinen: {cleaned}")
    
    def manual_scan(self):
        """Manuel tarama ba≈ülat"""
        if not self.connected_usbs:
            messagebox.showwarning("Uyarƒ±", "üîå USB s√ºr√ºc√º bulunamadƒ±!")
            return
        
        self.log("üîç Manuel tarama ba≈ülatƒ±ldƒ±", "info")
        for drive in list(self.connected_usbs.keys()):
            self.scan_drive(drive)
    
    def show_quarantine(self):
        """Karantina klas√∂r√ºn√º g√∂ster"""
        if not os.path.exists(self.quarantine_folder):
            messagebox.showinfo("Karantina", "üì¶ Karantina klas√∂r√º bo≈ü")
            return
        
        files = os.listdir(self.quarantine_folder)
        if not files:
            messagebox.showinfo("Karantina", "üì¶ Karantina klas√∂r√º bo≈ü")
            return
        
        # Karantina penceresi
        quarantine_win = tk.Toplevel(self.root)
        quarantine_win.title("üì¶ Karantina Y√∂netimi")
        quarantine_win.geometry("600x400")
        quarantine_win.configure(bg="#0d1117")
        
        tk.Label(quarantine_win, text="üì¶ Karantinaya Alƒ±nmƒ±≈ü Dosyalar", 
                font=("Segoe UI", 14, "bold"), bg="#0d1117", fg="#58a6ff").pack(pady=10)
        
        # Liste
        list_frame = tk.Frame(quarantine_win, bg="#0d1117")
        list_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        listbox = tk.Listbox(list_frame, bg="#161b22", fg="#c9d1d9",
                            font=("Consolas", 9), selectbackground="#1f6feb")
        scrollbar = tk.Scrollbar(list_frame, command=listbox.yview)
        listbox.config(yscrollcommand=scrollbar.set)
        
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        for file in files:
            listbox.insert(tk.END, file)
        
        # Butonlar
        btn_frame = tk.Frame(quarantine_win, bg="#0d1117")
        btn_frame.pack(fill=tk.X, padx=10, pady=10)
        
        def delete_selected():
            selection = listbox.curselection()
            if selection:
                file = listbox.get(selection[0])
                file_path = os.path.join(self.quarantine_folder, file)
                try:
                    os.remove(file_path)
                    listbox.delete(selection[0])
                    self.log(f"üóëÔ∏è Karantinadan silindi: {file}", "success")
                except Exception as e:
                    messagebox.showerror("Hata", f"Silinemedi: {str(e)}")
        
        def restore_selected():
            messagebox.showinfo("Geri Y√ºkle", "Bu √∂zellik ≈üu an i√ßin devre dƒ±≈üƒ± - g√ºvenlik nedeniyle")
        
        tk.Button(btn_frame, text="üóëÔ∏è Sil", command=delete_selected,
                 bg="#da3633", fg="white", font=("Segoe UI", 10, "bold"),
                 relief=tk.FLAT, padx=15, pady=5).pack(side=tk.LEFT, padx=5)
        
        tk.Button(btn_frame, text="üìÇ Klas√∂r√º A√ß", 
                 command=lambda: os.startfile(self.quarantine_folder),
                 bg="#1f6feb", fg="white", font=("Segoe UI", 10, "bold"),
                 relief=tk.FLAT, padx=15, pady=5).pack(side=tk.LEFT, padx=5)
    
    def manage_whitelist(self):
        """Whitelist y√∂netim penceresi"""
        whitelist_win = tk.Toplevel(self.root)
        whitelist_win.title("üìù Whitelist & Blacklist Y√∂netimi")
        whitelist_win.geometry("700x500")
        whitelist_win.configure(bg="#0d1117")
        
        tk.Label(whitelist_win, text="üìù Liste Y√∂netimi", 
                font=("Segoe UI", 16, "bold"), bg="#0d1117", fg="#58a6ff").pack(pady=15)
        
        # Notebook
        notebook = ttk.Notebook(whitelist_win)
        notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Whitelist tab
        white_tab = tk.Frame(notebook, bg="#0d1117")
        notebook.add(white_tab, text="‚úÖ Whitelist")
        
        white_list = tk.Listbox(white_tab, bg="#161b22", fg="#c9d1d9",
                               font=("Consolas", 10))
        white_list.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        for serial in self.usb_whitelist:
            white_list.insert(tk.END, serial)
        
        white_btn = tk.Frame(white_tab, bg="#0d1117")
        white_btn.pack(fill=tk.X, padx=10, pady=10)
        
        tk.Button(white_btn, text="‚ùå Listeden √áƒ±kar",
                 command=lambda: self.remove_from_list(white_list, self.usb_whitelist, 'whitelist'),
                 bg="#da3633", fg="white", font=("Segoe UI", 9, "bold"),
                 relief=tk.FLAT, pady=5).pack(fill=tk.X)
        
        # Blacklist tab
        black_tab = tk.Frame(notebook, bg="#0d1117")
        notebook.add(black_tab, text="üö´ Blacklist")
        
        black_list = tk.Listbox(black_tab, bg="#161b22", fg="#c9d1d9",
                               font=("Consolas", 10))
        black_list.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        for serial in self.usb_blacklist:
            black_list.insert(tk.END, serial)
        
        black_btn = tk.Frame(black_tab, bg="#0d1117")
        black_btn.pack(fill=tk.X, padx=10, pady=10)
        
        tk.Button(black_btn, text="‚ùå Listeden √áƒ±kar",
                 command=lambda: self.remove_from_list(black_list, self.usb_blacklist, 'blacklist'),
                 bg="#da3633", fg="white", font=("Segoe UI", 9, "bold"),
                 relief=tk.FLAT, pady=5).pack(fill=tk.X)
    
    def add_to_whitelist(self):
        """Se√ßili USB'yi whitelist'e ekle"""
        selection = self.usb_listbox.curselection()
        if not selection:
            messagebox.showwarning("Uyarƒ±", "L√ºtfen bir USB se√ßin!")
            return
        
        drive = list(self.connected_usbs.keys())[selection[0]]
        serial = self.connected_usbs[drive]['serial']
        
        if serial in self.usb_whitelist:
            messagebox.showinfo("Bilgi", "Bu USB zaten whitelist'te!")
            return
        
        self.usb_whitelist.add(serial)
        self.save_lists()
        self.log(f"‚úÖ Whitelist'e eklendi: {drive} (Serial: {serial})", "success")
        messagebox.showinfo("Ba≈üarƒ±lƒ±", f"‚úÖ {drive} whitelist'e eklendi!")
    
    def add_to_blacklist(self):
        """Se√ßili USB'yi blacklist'e ekle"""
        selection = self.usb_listbox.curselection()
        if not selection:
            messagebox.showwarning("Uyarƒ±", "L√ºtfen bir USB se√ßin!")
            return
        
        drive = list(self.connected_usbs.keys())[selection[0]]
        serial = self.connected_usbs[drive]['serial']
        
        response = messagebox.askyesno("Onay", 
                                      f"‚ö†Ô∏è {drive} blacklist'e eklenecek!\n\n"
                                      f"Bu USB bir daha baƒülanamayacak.\nEmin misiniz?")
        if response:
            self.usb_blacklist.add(serial)
            self.save_lists()
            self.log(f"üö´ Blacklist'e eklendi: {drive} (Serial: {serial})", "error")
            messagebox.showwarning("Blacklist", f"üö´ {drive} blacklist'e eklendi!")
    
    def remove_from_list(self, listbox, list_set, list_name):
        """Listeden √ßƒ±kar"""
        selection = listbox.curselection()
        if selection:
            serial = listbox.get(selection[0])
            list_set.discard(serial)
            listbox.delete(selection[0])
            self.save_lists()
            self.log(f"‚ùå {list_name}'ten √ßƒ±karƒ±ldƒ±: {serial}", "warning")
    
    def show_usb_details(self):
        """USB detaylarƒ±nƒ± g√∂ster"""
        selection = self.usb_listbox.curselection()
        if not selection:
            messagebox.showwarning("Uyarƒ±", "L√ºtfen bir USB se√ßin!")
            return
        
        drive = list(self.connected_usbs.keys())[selection[0]]
        info = self.connected_usbs[drive]
        
        details = f"""
üîå USB Cihaz Detaylarƒ±
{'='*40}

S√ºr√ºc√º: {drive}
ƒ∞sim: {info['name']}
Serial Numarasƒ±: {info['serial']}
Dosya Sistemi: {info['filesystem']}

üíæ Kapasite Bilgisi:
Toplam Alan: {self.format_bytes(info['total_space'])}
Kullanƒ±lan: {self.format_bytes(info['used_space'])}
Bo≈ü Alan: {self.format_bytes(info['free_space'])}
Doluluk: %{info['percent']:.1f}

üõ°Ô∏è G√ºvenlik Durumu:
Whitelist: {'‚úÖ Evet' if info['serial'] in self.usb_whitelist else '‚ùå Hayƒ±r'}
Blacklist: {'‚ö†Ô∏è Evet' if info['serial'] in self.usb_blacklist else '‚úÖ Hayƒ±r'}
        """
        
        messagebox.showinfo("USB Detaylarƒ±", details)
    
    def safe_eject(self):
        """G√ºvenli √ßƒ±kar"""
        selection = self.usb_listbox.curselection()
        if not selection:
            messagebox.showwarning("Uyarƒ±", "L√ºtfen bir USB se√ßin!")
            return
        
        drive = list(self.connected_usbs.keys())[selection[0]]
        messagebox.showinfo("G√ºvenli √áƒ±kar", 
                          f"‚èèÔ∏è {drive} s√ºr√ºc√ºs√ºn√º g√ºvenle √ßƒ±karabilirsiniz!")
    
    def update_history(self):
        """Tarama ge√ßmi≈üini g√ºncelle"""
        self.history_text.delete(1.0, tk.END)
        for entry in reversed(self.scan_history[-20:]):  # Son 20 tarama
            history_line = (f"üìÖ {entry['time']} | "
                          f"Drive: {entry['drive']} | "
                          f"Dosya: {entry['files_scanned']} | "
                          f"Tehdit: {entry['threats']} | "
                          f"S√ºre: {entry['duration']:.2f}s\n")
            self.history_text.insert(tk.END, history_line)
    
    def update_status(self):
        """Durum g√ºncelle"""
        if self.monitoring:
            drive_count = len(self.connected_usbs)
            if drive_count > 0:
                self.status_label.config(text=f"üü¢ ƒ∞zleme Aktif ({drive_count} USB Baƒülƒ±)")
        self.root.after(1000, self.update_status)
    
    def run(self):
        """Programƒ± √ßalƒ±≈ütƒ±r"""
        self.root.mainloop()

if __name__ == "__main__":
    app = ByteLock()
    app.run()